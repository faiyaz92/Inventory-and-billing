// Mocks generated by Mockito 5.4.4 from annotations
// in requirment_gathering_app/test/main.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:requirment_gathering_app/coordinator/coordinator.dart' as _i6;
import 'package:requirment_gathering_app/data/company.dart' as _i7;
import 'package:requirment_gathering_app/login/splash_cubit.dart' as _i2;
import 'package:requirment_gathering_app/repositories/account_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSplashState_0 extends _i1.SmartFake implements _i2.SplashState {
  _FakeSplashState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i3.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool isUserLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isUserLoggedIn,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [SplashCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashCubit extends _i1.Mock implements _i2.SplashCubit {
  MockSplashCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SplashState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSplashState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.SplashState);

  @override
  _i4.Stream<_i2.SplashState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.SplashState>.empty(),
      ) as _i4.Stream<_i2.SplashState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void checkSession() => super.noSuchMethod(
        Invocation.method(
          #checkSession,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.SplashState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i5.Change<_i2.SplashState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Coordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinator extends _i1.Mock implements _i6.Coordinator {
  MockCoordinator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void navigateToLoginPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToLoginPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToDashboardPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToDashboardPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToSplashScreen() => super.noSuchMethod(
        Invocation.method(
          #navigateToSplashScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToHomePage() => super.noSuchMethod(
        Invocation.method(
          #navigateToHomePage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToCompanyListPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToCompanyListPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToReportsPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToReportsPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToCompanySettingsPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToCompanySettingsPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToAddCompanyPage() => super.noSuchMethod(
        Invocation.method(
          #navigateToAddCompanyPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToCompanyDetailsPage(_i7.Company? company) => super.noSuchMethod(
        Invocation.method(
          #navigateToCompanyDetailsPage,
          [company],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToEditCompanyPage(_i7.Company? company) => super.noSuchMethod(
        Invocation.method(
          #navigateToEditCompanyPage,
          [company],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateBack() => super.noSuchMethod(
        Invocation.method(
          #navigateBack,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
